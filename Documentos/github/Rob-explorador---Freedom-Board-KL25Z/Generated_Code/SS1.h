/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : SS1.h
**     Project     : ProcessorExpert
**     Processor   : MKL25Z128VLK4
**     Component   : SPISlave_LDD
**     Version     : Component 01.035, Driver 01.02, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2013-09-09, 14:34, # CodeGen: 47
**     Abstract    :
**         This component "SPISlave_LDD" implements SLAVE part of synchronous
**         serial master-slave communication.
**     Settings    :
**          Component name                                 : SS1
**          Device                                         : SPI0
**          Interrupt service/event                        : Enabled
**            Input interrupt                              : INT_SPI0
**            Input interrupt priority                     : medium priority
**            Output interrupt                             : INT_SPI0
**            Output interrupt priority                    : medium priority
**          Settings                                       : 
**            Input pin                                    : Enabled
**              Pin                                        : CMP0_IN0/PTC6/LLWU_P10/SPI0_MOSI/EXTRG_IN/SPI0_MISO
**              Pin signal                                 : 
**            Output pin                                   : Enabled
**              Pin                                        : CMP0_IN1/PTC7/SPI0_MISO/SPI0_MOSI
**              Pin signal                                 : 
**            Clock pin                                    : 
**              Pin                                        : PTC5/LLWU_P9/SPI0_SCK/LPTMR0_ALT2/CMP0_OUT
**              Pin signal                                 : 
**            Slave select                                 : 
**              Pin                                        : PTC4/LLWU_P8/SPI0_PCS0/UART1_TX/TPM0_CH3
**              Pin signal                                 : 
**              Active level                               : Low
**            Attribute set                                : 
**              Width                                      : 8 bits
**              MSB first                                  : yes
**              Clock polarity                             : Low
**              Clock phase                                : Capture on leading edge
**              Parity                                     : None
**            HW input buffer size                         : 1
**            HW input watermark                           : 1
**            HW output buffer size                        : 1
**            HW output watermark                          : 1
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : no
**            Event mask                                   : 
**              OnBlockSent                                : Enabled
**              OnBlockReceived                            : Enabled
**              OnError                                    : Disabled
**     Contents    :
**         Init               - LDD_TDeviceData* SS1_Init(LDD_TUserData *UserDataPtr);
**         Deinit             - void SS1_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         SendBlock          - LDD_TError SS1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData...
**         ReceiveBlock       - LDD_TError SS1_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData...
**         GetSentDataNum     - uint16_t SS1_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr);
**         GetReceivedDataNum - uint16_t SS1_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr);
**
**     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __SS1_H
#define __SS1_H

/* MODULE SS1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "Cpu.h"
#include "SPI_PDD.h"
#include "PE_LDD.h"


/* Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define SS1_PRPH_BASE_ADDRESS  0x40076000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define SS1_Init_METHOD_ENABLED
#define SS1_Deinit_METHOD_ENABLED
#define SS1_SendBlock_METHOD_ENABLED
#define SS1_ReceiveBlock_METHOD_ENABLED
#define SS1_GetSentDataNum_METHOD_ENABLED
#define SS1_GetReceivedDataNum_METHOD_ENABLED

/* Events configuration constants - generated for all enabled component's events */
#define SS1_OnBlockSent_EVENT_ENABLED
#define SS1_OnBlockReceived_EVENT_ENABLED


/* Communication error data type */


LDD_TDeviceData* SS1_Init(LDD_TUserData *UserDataPtr);
/*
** ===================================================================
**     Method      :  SS1_Init (component SPISlave_LDD)
**
**     Description :
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc.
**         If the "Enable in init. code" is set to "yes" value then the
**         device is also enabled(see the description of the Enable()
**         method). In this case the Enable() method is not necessary
**         and needn't to be generated. 
**         This method can be called only once. Before the second call
**         of Init() the Deinit() must be called first.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     Returns     :
**         ---             - Device data structure pointer.
** ===================================================================
*/

void SS1_Deinit(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  SS1_Deinit (component SPISlave_LDD)
**
**     Description :
**         This method deinitializes the device. It switches off the
**         device, frees the device data structure memory, interrupts
**         vectors, etc.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     : Nothing
** ===================================================================
*/

LDD_TError SS1_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size);
/*
** ===================================================================
**     Method      :  SS1_ReceiveBlock (component SPISlave_LDD)
**
**     Description :
**         This method specifies the number of data to receive. The
**         method returns ERR_BUSY until the specified number of
**         characters is received. The method <CancelBlockReception>
**         can be used to cancel a running receive operation.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * BufferPtr       - Pointer to A buffer where
**                           received characters will be stored.
**         Size            - Size of the block
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_DISABLED - Component is disabled
**                           ERR_BUSY - The previous receive request is
**                           pending
** ===================================================================
*/

LDD_TError SS1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size);
/*
** ===================================================================
**     Method      :  SS1_SendBlock (component SPISlave_LDD)
**
**     Description :
**         This method sends a block of characters. The method returns
**         ERR_BUSY when the previous block transmission is not
**         completed. The method <CancelBlockTransmission> can be used
**         to cancel a transmit operation.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**       * BufferPtr       - Pointer to the block of data
**                           to send.
**         Size            - Number of characters in the buffer.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_DISABLED - Component is disabled
**                           ERR_BUSY - The previous transmit request is
**                           pending
** ===================================================================
*/

uint16_t SS1_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  SS1_GetReceivedDataNum (component SPISlave_LDD)
**
**     Description :
**         Returns the number of received characters in the receive
**         buffer. This method is available only if the ReceiveBlock
**         method is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - The number of characters in the input
**                           buffer.
** ===================================================================
*/

uint16_t SS1_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  SS1_GetSentDataNum (component SPISlave_LDD)
**
**     Description :
**         Returns the number of sent characters. This method is
**         available only if method SendBlock is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - The number of characters in the output
**                           buffer.
** ===================================================================
*/

/* {MQXLite RTOS Adapter} ISR function prototype */
void SS1_Interrupt(LDD_RTOS_TISRParameter _isrParameter);
/*
** ===================================================================
**     Method      :  SS1_Interrupt (component SPISlave_LDD)
**
**     Description :
**         The ISR function handling the device receive/transmit 
**         interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

/* END SS1. */

#endif
/* ifndef __SS1_H */
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0 [05.03]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
