   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"AS1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  18              		.align	2
  21              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  22 0000 00000000 		.space	32
  22      00000000 
  22      00000000 
  22      00000000 
  22      00000000 
  23              		.section	.text.AS1_Init,"ax",%progbits
  24              		.align	2
  25              		.global	AS1_Init
  26              		.code	16
  27              		.thumb_func
  29              	AS1_Init:
  30              	.LFB0:
  31              		.file 1 "../Generated_Code/AS1.c"
   1:../Generated_Code/AS1.c **** /** ###################################################################
   2:../Generated_Code/AS1.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/AS1.c **** **     Filename    : AS1.c
   4:../Generated_Code/AS1.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/AS1.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/AS1.c **** **     Component   : Serial_LDD
   7:../Generated_Code/AS1.c **** **     Version     : Component 01.165, Driver 01.10, CPU db: 3.00.000
   8:../Generated_Code/AS1.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/AS1.c **** **     Date/Time   : 2013-09-09, 14:34, # CodeGen: 47
  10:../Generated_Code/AS1.c **** **     Abstract    :
  11:../Generated_Code/AS1.c **** **         This component "Serial_LDD" implements an asynchronous serial
  12:../Generated_Code/AS1.c **** **         communication. The component supports different settings of
  13:../Generated_Code/AS1.c **** **         parity, word width, stop-bit and communication speed,
  14:../Generated_Code/AS1.c **** **         user can select interrupt or polling handler.
  15:../Generated_Code/AS1.c **** **         Communication speed can be changed also in runtime.
  16:../Generated_Code/AS1.c **** **         The component requires one on-chip asynchronous serial communication channel.
  17:../Generated_Code/AS1.c **** **     Settings    :
  18:../Generated_Code/AS1.c **** **          Component name                                 : AS1
  19:../Generated_Code/AS1.c **** **          Device                                         : UART0
  20:../Generated_Code/AS1.c **** **          Interrupt service/event                        : Enabled
  21:../Generated_Code/AS1.c **** **            Interrupt RxD                                : INT_UART0
  22:../Generated_Code/AS1.c **** **            Interrupt RxD priority                       : medium priority
  23:../Generated_Code/AS1.c **** **            Interrupt TxD                                : INT_UART0
  24:../Generated_Code/AS1.c **** **            Interrupt TxD priority                       : medium priority
  25:../Generated_Code/AS1.c **** **            Interrupt Error                              : INT_UART0
  26:../Generated_Code/AS1.c **** **            Interrupt Error priority                     : medium priority
  27:../Generated_Code/AS1.c **** **          Settings                                       : 
  28:../Generated_Code/AS1.c **** **            Data width                                   : 8 bits
  29:../Generated_Code/AS1.c **** **            Parity                                       : None
  30:../Generated_Code/AS1.c **** **            Stop bits                                    : 1
  31:../Generated_Code/AS1.c **** **            Loop mode                                    : Normal
  32:../Generated_Code/AS1.c **** **            Baud rate                                    : 38400 baud
  33:../Generated_Code/AS1.c **** **            Wakeup condition                             : Idle line wakeup
  34:../Generated_Code/AS1.c **** **            Stop in wait mode                            : no
  35:../Generated_Code/AS1.c **** **            Idle line mode                               : Starts after start bit
  36:../Generated_Code/AS1.c **** **            Transmitter output                           : Not inverted
  37:../Generated_Code/AS1.c **** **            Receiver input                               : Not inverted
  38:../Generated_Code/AS1.c **** **            Break generation length                      : 10/11 bits
  39:../Generated_Code/AS1.c **** **            Receiver                                     : Enabled
  40:../Generated_Code/AS1.c **** **              RxD                                        : TSI0_CH2/PTA1/UART0_RX/TPM2_CH0
  41:../Generated_Code/AS1.c **** **              RxD pin signal                             : 
  42:../Generated_Code/AS1.c **** **            Transmitter                                  : Enabled
  43:../Generated_Code/AS1.c **** **              TxD                                        : TSI0_CH3/PTA2/UART0_TX/TPM2_CH1
  44:../Generated_Code/AS1.c **** **              TxD pin signal                             : 
  45:../Generated_Code/AS1.c **** **            Flow control                                 : None
  46:../Generated_Code/AS1.c **** **          Initialization                                 : 
  47:../Generated_Code/AS1.c **** **            Enabled in init. code                        : yes
  48:../Generated_Code/AS1.c **** **            Auto initialization                          : no
  49:../Generated_Code/AS1.c **** **            Event mask                                   : 
  50:../Generated_Code/AS1.c **** **              OnBlockSent                                : Enabled
  51:../Generated_Code/AS1.c **** **              OnBlockReceived                            : Enabled
  52:../Generated_Code/AS1.c **** **              OnTxComplete                               : Disabled
  53:../Generated_Code/AS1.c **** **              OnError                                    : Disabled
  54:../Generated_Code/AS1.c **** **              OnBreak                                    : Disabled
  55:../Generated_Code/AS1.c **** **          CPU clock/configuration selection              : 
  56:../Generated_Code/AS1.c **** **            Clock configuration 0                        : This component enabled
  57:../Generated_Code/AS1.c **** **            Clock configuration 1                        : This component disabled
  58:../Generated_Code/AS1.c **** **            Clock configuration 2                        : This component disabled
  59:../Generated_Code/AS1.c **** **            Clock configuration 3                        : This component disabled
  60:../Generated_Code/AS1.c **** **            Clock configuration 4                        : This component disabled
  61:../Generated_Code/AS1.c **** **            Clock configuration 5                        : This component disabled
  62:../Generated_Code/AS1.c **** **            Clock configuration 6                        : This component disabled
  63:../Generated_Code/AS1.c **** **            Clock configuration 7                        : This component disabled
  64:../Generated_Code/AS1.c **** **     Contents    :
  65:../Generated_Code/AS1.c **** **         Init               - LDD_TDeviceData* AS1_Init(LDD_TUserData *UserDataPtr);
  66:../Generated_Code/AS1.c **** **         Deinit             - void AS1_Deinit(LDD_TDeviceData *DeviceDataPtr);
  67:../Generated_Code/AS1.c **** **         SendBlock          - LDD_TError AS1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData.
  68:../Generated_Code/AS1.c **** **         ReceiveBlock       - LDD_TError AS1_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TDa
  69:../Generated_Code/AS1.c **** **         GetSentDataNum     - uint16_t AS1_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr);
  70:../Generated_Code/AS1.c **** **         GetReceivedDataNum - uint16_t AS1_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr);
  71:../Generated_Code/AS1.c **** **
  72:../Generated_Code/AS1.c **** **     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
  73:../Generated_Code/AS1.c **** **     
  74:../Generated_Code/AS1.c **** **     http      : www.freescale.com
  75:../Generated_Code/AS1.c **** **     mail      : support@freescale.com
  76:../Generated_Code/AS1.c **** ** ###################################################################*/
  77:../Generated_Code/AS1.c **** 
  78:../Generated_Code/AS1.c **** /* MODULE AS1. */
  79:../Generated_Code/AS1.c **** /*lint -save  -e926 -e927 -e928 -e929 -e572 Disable MISRA rule (11.4,12.8) checking. */
  80:../Generated_Code/AS1.c **** 
  81:../Generated_Code/AS1.c **** /* MQX Lite include files */
  82:../Generated_Code/AS1.c **** #include "mqxlite.h"
  83:../Generated_Code/AS1.c **** #include "mqxlite_prv.h"
  84:../Generated_Code/AS1.c **** #include "AS1.h"
  85:../Generated_Code/AS1.c **** #include "Events.h"
  86:../Generated_Code/AS1.c **** #include "UART0_PDD.h"
  87:../Generated_Code/AS1.c **** 
  88:../Generated_Code/AS1.c **** #define AVAILABLE_EVENTS_MASK (LDD_SERIAL_ON_BLOCK_RECEIVED | LDD_SERIAL_ON_BLOCK_SENT)
  89:../Generated_Code/AS1.c **** 
  90:../Generated_Code/AS1.c **** /* {MQXLite RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
  91:../Generated_Code/AS1.c **** static AS1_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  92:../Generated_Code/AS1.c **** 
  93:../Generated_Code/AS1.c **** /*
  94:../Generated_Code/AS1.c **** ** ===================================================================
  95:../Generated_Code/AS1.c **** **     Method      :  AS1_Init (component Serial_LDD)
  96:../Generated_Code/AS1.c **** **
  97:../Generated_Code/AS1.c **** **     Description :
  98:../Generated_Code/AS1.c **** **         Initializes the device. Allocates memory for the device data
  99:../Generated_Code/AS1.c **** **         structure, allocates interrupt vectors and sets interrupt
 100:../Generated_Code/AS1.c **** **         priority, sets pin routing, sets timing, etc. If the "Enable
 101:../Generated_Code/AS1.c **** **         in init. code" is set to "yes" value then the device is also
 102:../Generated_Code/AS1.c **** **         enabled(see the description of the Enable() method). In this
 103:../Generated_Code/AS1.c **** **         case the Enable() method is not necessary and needn't to be
 104:../Generated_Code/AS1.c **** **         generated. 
 105:../Generated_Code/AS1.c **** **     Parameters  :
 106:../Generated_Code/AS1.c **** **         NAME            - DESCRIPTION
 107:../Generated_Code/AS1.c **** **       * UserDataPtr     - Pointer to the user or
 108:../Generated_Code/AS1.c **** **                           RTOS specific data. This pointer will be
 109:../Generated_Code/AS1.c **** **                           passed as an event or callback parameter.
 110:../Generated_Code/AS1.c **** **     Returns     :
 111:../Generated_Code/AS1.c **** **         ---             - Device data structure pointer.
 112:../Generated_Code/AS1.c **** ** ===================================================================
 113:../Generated_Code/AS1.c **** */
 114:../Generated_Code/AS1.c **** LDD_TDeviceData* AS1_Init(LDD_TUserData *UserDataPtr)
 115:../Generated_Code/AS1.c **** {
  32              		.loc 1 115 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
 116:../Generated_Code/AS1.c ****   /* Allocate device structure */
 117:../Generated_Code/AS1.c ****   AS1_TDeviceDataPtr DeviceDataPrv;
 118:../Generated_Code/AS1.c ****   /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 119:../Generated_Code/AS1.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  46              		.loc 1 119 0
  47 0008 644B     		ldr	r3, .L2
  48 000a FB60     		str	r3, [r7, #12]
 120:../Generated_Code/AS1.c **** 
 121:../Generated_Code/AS1.c ****   /* Clear the receive counters and pointer */
 122:../Generated_Code/AS1.c ****   DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
  49              		.loc 1 122 0
  50 000c FB68     		ldr	r3, [r7, #12]
  51 000e 0022     		mov	r2, #0
  52 0010 5A80     		strh	r2, [r3, #2]
 123:../Generated_Code/AS1.c ****   DeviceDataPrv->InpDataNumReq = 0x00U; /* Clear the counter of characters to receive by ReceiveBlo
  53              		.loc 1 123 0
  54 0012 FB68     		ldr	r3, [r7, #12]
  55 0014 0022     		mov	r2, #0
  56 0016 1A81     		strh	r2, [r3, #8]
 124:../Generated_Code/AS1.c ****   DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
  57              		.loc 1 124 0
  58 0018 FB68     		ldr	r3, [r7, #12]
  59 001a 0022     		mov	r2, #0
  60 001c 5A60     		str	r2, [r3, #4]
 125:../Generated_Code/AS1.c ****   /* Clear the transmit counters and pointer */
 126:../Generated_Code/AS1.c ****   DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
  61              		.loc 1 126 0
  62 001e FB68     		ldr	r3, [r7, #12]
  63 0020 0022     		mov	r2, #0
  64 0022 5A81     		strh	r2, [r3, #10]
 127:../Generated_Code/AS1.c ****   DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock(
  65              		.loc 1 127 0
  66 0024 FB68     		ldr	r3, [r7, #12]
  67 0026 0022     		mov	r2, #0
  68 0028 1A82     		strh	r2, [r3, #16]
 128:../Generated_Code/AS1.c ****   DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
  69              		.loc 1 128 0
  70 002a FB68     		ldr	r3, [r7, #12]
  71 002c 0022     		mov	r2, #0
  72 002e DA60     		str	r2, [r3, #12]
 129:../Generated_Code/AS1.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  73              		.loc 1 129 0
  74 0030 FB68     		ldr	r3, [r7, #12]
  75 0032 7A68     		ldr	r2, [r7, #4]
  76 0034 DA61     		str	r2, [r3, #28]
 130:../Generated_Code/AS1.c ****   /* Allocate interrupt vectors */
 131:../Generated_Code/AS1.c ****   /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR paramet
 132:../Generated_Code/AS1.c ****   /* Note: Exception handler for interrupt is not saved, because it is not modified */
 133:../Generated_Code/AS1.c ****   DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_UART0);
  77              		.loc 1 133 0
  78 0036 1C20     		mov	r0, #28
  79 0038 FFF7FEFF 		bl	_int_get_isr_data
  80 003c 021C     		mov	r2, r0
  81 003e FB68     		ldr	r3, [r7, #12]
  82 0040 9A61     		str	r2, [r3, #24]
 134:../Generated_Code/AS1.c ****   DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_UART0, AS1_Interru
  83              		.loc 1 134 0
  84 0042 574A     		ldr	r2, .L2+4
  85 0044 FB68     		ldr	r3, [r7, #12]
  86 0046 1C20     		mov	r0, #28
  87 0048 111C     		mov	r1, r2
  88 004a 1A1C     		mov	r2, r3
  89 004c FFF7FEFF 		bl	_int_install_isr
  90 0050 021C     		mov	r2, r0
  91 0052 FB68     		ldr	r3, [r7, #12]
  92 0054 5A61     		str	r2, [r3, #20]
 135:../Generated_Code/AS1.c ****   /* SIM_SCGC4: UART0=1 */
 136:../Generated_Code/AS1.c ****   SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;                                                   
  93              		.loc 1 136 0
  94 0056 534A     		ldr	r2, .L2+8
  95 0058 5249     		ldr	r1, .L2+8
  96 005a 534B     		ldr	r3, .L2+12
  97 005c CB58     		ldr	r3, [r1, r3]
  98 005e 8021     		mov	r1, #128
  99 0060 C900     		lsl	r1, r1, #3
 100 0062 1943     		orr	r1, r3
 101 0064 504B     		ldr	r3, .L2+12
 102 0066 D150     		str	r1, [r2, r3]
 137:../Generated_Code/AS1.c ****   /* PORTA_PCR1: ISF=0,MUX=2 */
 138:../Generated_Code/AS1.c ****   PORTA_PCR1 = (uint32_t)((PORTA_PCR1 & (uint32_t)~(uint32_t)(
 103              		.loc 1 138 0
 104 0068 504B     		ldr	r3, .L2+16
 105 006a 504A     		ldr	r2, .L2+16
 106 006c 5268     		ldr	r2, [r2, #4]
 107 006e 111C     		mov	r1, r2
 108 0070 4F4A     		ldr	r2, .L2+20
 109 0072 0A40     		and	r2, r1
 110 0074 8021     		mov	r1, #128
 111 0076 8900     		lsl	r1, r1, #2
 112 0078 0A43     		orr	r2, r1
 113 007a 5A60     		str	r2, [r3, #4]
 139:../Generated_Code/AS1.c ****                 PORT_PCR_ISF_MASK |
 140:../Generated_Code/AS1.c ****                 PORT_PCR_MUX(0x05)
 141:../Generated_Code/AS1.c ****                )) | (uint32_t)(
 142:../Generated_Code/AS1.c ****                 PORT_PCR_MUX(0x02)
 143:../Generated_Code/AS1.c ****                ));                                                  
 144:../Generated_Code/AS1.c ****   /* PORTA_PCR2: ISF=0,MUX=2 */
 145:../Generated_Code/AS1.c ****   PORTA_PCR2 = (uint32_t)((PORTA_PCR2 & (uint32_t)~(uint32_t)(
 114              		.loc 1 145 0
 115 007c 4B4B     		ldr	r3, .L2+16
 116 007e 4B4A     		ldr	r2, .L2+16
 117 0080 9268     		ldr	r2, [r2, #8]
 118 0082 111C     		mov	r1, r2
 119 0084 4A4A     		ldr	r2, .L2+20
 120 0086 0A40     		and	r2, r1
 121 0088 8021     		mov	r1, #128
 122 008a 8900     		lsl	r1, r1, #2
 123 008c 0A43     		orr	r2, r1
 124 008e 9A60     		str	r2, [r3, #8]
 146:../Generated_Code/AS1.c ****                 PORT_PCR_ISF_MASK |
 147:../Generated_Code/AS1.c ****                 PORT_PCR_MUX(0x05)
 148:../Generated_Code/AS1.c ****                )) | (uint32_t)(
 149:../Generated_Code/AS1.c ****                 PORT_PCR_MUX(0x02)
 150:../Generated_Code/AS1.c ****                ));                                                  
 151:../Generated_Code/AS1.c ****   /* NVIC_IPR3: PRI_12=0x80 */
 152:../Generated_Code/AS1.c ****   NVIC_IPR3 = (uint32_t)((NVIC_IPR3 & (uint32_t)~(uint32_t)(
 125              		.loc 1 152 0
 126 0090 484A     		ldr	r2, .L2+24
 127 0092 4849     		ldr	r1, .L2+24
 128 0094 C323     		mov	r3, #195
 129 0096 9B00     		lsl	r3, r3, #2
 130 0098 CB58     		ldr	r3, [r1, r3]
 131 009a FF21     		mov	r1, #255
 132 009c 8B43     		bic	r3, r1
 133 009e 8021     		mov	r1, #128
 134 00a0 1943     		orr	r1, r3
 135 00a2 C323     		mov	r3, #195
 136 00a4 9B00     		lsl	r3, r3, #2
 137 00a6 D150     		str	r1, [r2, r3]
 153:../Generated_Code/AS1.c ****                NVIC_IP_PRI_12(0x7F)
 154:../Generated_Code/AS1.c ****               )) | (uint32_t)(
 155:../Generated_Code/AS1.c ****                NVIC_IP_PRI_12(0x80)
 156:../Generated_Code/AS1.c ****               ));                                                  
 157:../Generated_Code/AS1.c ****   /* NVIC_ISER: SETENA|=0x1000 */
 158:../Generated_Code/AS1.c ****   NVIC_ISER |= NVIC_ISER_SETENA(0x1000);                                                   
 138              		.loc 1 158 0
 139 00a8 424B     		ldr	r3, .L2+24
 140 00aa 424A     		ldr	r2, .L2+24
 141 00ac 1268     		ldr	r2, [r2]
 142 00ae 8021     		mov	r1, #128
 143 00b0 4901     		lsl	r1, r1, #5
 144 00b2 0A43     		orr	r2, r1
 145 00b4 1A60     		str	r2, [r3]
 159:../Generated_Code/AS1.c ****   UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
 146              		.loc 1 159 0
 147 00b6 404B     		ldr	r3, .L2+28
 148 00b8 3F4A     		ldr	r2, .L2+28
 149 00ba D278     		ldrb	r2, [r2, #3]
 150 00bc D2B2     		uxtb	r2, r2
 151 00be 0821     		mov	r1, #8
 152 00c0 8A43     		bic	r2, r1
 153 00c2 D2B2     		uxtb	r2, r2
 154 00c4 DA70     		strb	r2, [r3, #3]
 160:../Generated_Code/AS1.c ****   UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
 155              		.loc 1 160 0
 156 00c6 3C4B     		ldr	r3, .L2+28
 157 00c8 3B4A     		ldr	r2, .L2+28
 158 00ca D278     		ldrb	r2, [r2, #3]
 159 00cc D2B2     		uxtb	r2, r2
 160 00ce 0421     		mov	r1, #4
 161 00d0 8A43     		bic	r2, r1
 162 00d2 D2B2     		uxtb	r2, r2
 163 00d4 DA70     		strb	r2, [r3, #3]
 161:../Generated_Code/AS1.c ****   DeviceDataPrv->SerFlag = 0x00U;      /* Reset flags */
 164              		.loc 1 161 0
 165 00d6 FB68     		ldr	r3, [r7, #12]
 166 00d8 0022     		mov	r2, #0
 167 00da 1A80     		strh	r2, [r3]
 162:../Generated_Code/AS1.c ****   /* UART0_C1: LOOPS=0,DOZEEN=0,RSRC=0,M=0,WAKE=0,ILT=0,PE=0,PT=0 */
 163:../Generated_Code/AS1.c ****   UART0_C1 = 0x00U;                    /*  Set the C1 register */
 168              		.loc 1 163 0
 169 00dc 364B     		ldr	r3, .L2+28
 170 00de 0022     		mov	r2, #0
 171 00e0 9A70     		strb	r2, [r3, #2]
 164:../Generated_Code/AS1.c ****   /* UART0_C3: R8T9=0,R9T8=0,TXDIR=0,TXINV=0,ORIE=0,NEIE=0,FEIE=0,PEIE=0 */
 165:../Generated_Code/AS1.c ****   UART0_C3 = 0x00U;                    /*  Set the C3 register */
 172              		.loc 1 165 0
 173 00e2 354B     		ldr	r3, .L2+28
 174 00e4 0022     		mov	r2, #0
 175 00e6 9A71     		strb	r2, [r3, #6]
 166:../Generated_Code/AS1.c ****   /* UART0_S2: LBKDIF=0,RXEDGIF=0,MSBF=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
 167:../Generated_Code/AS1.c ****   UART0_S2 = 0x00U;                    /*  Set the S2 register */
 176              		.loc 1 167 0
 177 00e8 334B     		ldr	r3, .L2+28
 178 00ea 0022     		mov	r2, #0
 179 00ec 5A71     		strb	r2, [r3, #5]
 168:../Generated_Code/AS1.c ****   UART0_PDD_SetClockSource(UART0_BASE_PTR, UART0_PDD_PLL_FLL_CLOCK);
 180              		.loc 1 168 0
 181 00ee 2D4A     		ldr	r2, .L2+8
 182 00f0 2C49     		ldr	r1, .L2+8
 183 00f2 324B     		ldr	r3, .L2+32
 184 00f4 CB58     		ldr	r3, [r1, r3]
 185 00f6 191C     		mov	r1, r3
 186 00f8 314B     		ldr	r3, .L2+36
 187 00fa 0B40     		and	r3, r1
 188 00fc 8021     		mov	r1, #128
 189 00fe C904     		lsl	r1, r1, #19
 190 0100 1943     		orr	r1, r3
 191 0102 2E4B     		ldr	r3, .L2+32
 192 0104 D150     		str	r1, [r2, r3]
 169:../Generated_Code/AS1.c ****   UART0_PDD_SetBaudRate(UART0_BASE_PTR, 137U); /* Set the baud rate register. */
 193              		.loc 1 169 0
 194 0106 2C4B     		ldr	r3, .L2+28
 195 0108 2B4A     		ldr	r2, .L2+28
 196 010a 1278     		ldrb	r2, [r2]
 197 010c D2B2     		uxtb	r2, r2
 198 010e 1F21     		mov	r1, #31
 199 0110 8A43     		bic	r2, r1
 200 0112 D2B2     		uxtb	r2, r2
 201 0114 1A70     		strb	r2, [r3]
 202 0116 284B     		ldr	r3, .L2+28
 203 0118 8922     		mov	r2, #137
 204 011a 5A70     		strb	r2, [r3, #1]
 170:../Generated_Code/AS1.c ****   UART0_PDD_SetOversamplingRatio(UART0_BASE_PTR, 3U);
 205              		.loc 1 170 0
 206 011c 264B     		ldr	r3, .L2+28
 207 011e 264A     		ldr	r2, .L2+28
 208 0120 927A     		ldrb	r2, [r2, #10]
 209 0122 D2B2     		uxtb	r2, r2
 210 0124 D2B2     		uxtb	r2, r2
 211 0126 1F21     		mov	r1, #31
 212 0128 8A43     		bic	r2, r1
 213 012a D2B2     		uxtb	r2, r2
 214 012c 0321     		mov	r1, #3
 215 012e 0A43     		orr	r2, r1
 216 0130 D2B2     		uxtb	r2, r2
 217 0132 D2B2     		uxtb	r2, r2
 218 0134 9A72     		strb	r2, [r3, #10]
 171:../Generated_Code/AS1.c ****   UART0_PDD_EnableSamplingOnBothEdges(UART0_BASE_PTR, PDD_ENABLE);
 219              		.loc 1 171 0
 220 0136 204B     		ldr	r3, .L2+28
 221 0138 1F4A     		ldr	r2, .L2+28
 222 013a D27A     		ldrb	r2, [r2, #11]
 223 013c D2B2     		uxtb	r2, r2
 224 013e D2B2     		uxtb	r2, r2
 225 0140 0221     		mov	r1, #2
 226 0142 0A43     		orr	r2, r1
 227 0144 D2B2     		uxtb	r2, r2
 228 0146 D2B2     		uxtb	r2, r2
 229 0148 DA72     		strb	r2, [r3, #11]
 172:../Generated_Code/AS1.c ****   UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_ENABLE); /* Enable transmitter */
 230              		.loc 1 172 0
 231 014a 1B4B     		ldr	r3, .L2+28
 232 014c 1A4A     		ldr	r2, .L2+28
 233 014e D278     		ldrb	r2, [r2, #3]
 234 0150 D2B2     		uxtb	r2, r2
 235 0152 D2B2     		uxtb	r2, r2
 236 0154 0821     		mov	r1, #8
 237 0156 0A43     		orr	r2, r1
 238 0158 D2B2     		uxtb	r2, r2
 239 015a D2B2     		uxtb	r2, r2
 240 015c DA70     		strb	r2, [r3, #3]
 173:../Generated_Code/AS1.c ****   UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_ENABLE); /* Enable receiver */
 241              		.loc 1 173 0
 242 015e 164B     		ldr	r3, .L2+28
 243 0160 154A     		ldr	r2, .L2+28
 244 0162 D278     		ldrb	r2, [r2, #3]
 245 0164 D2B2     		uxtb	r2, r2
 246 0166 D2B2     		uxtb	r2, r2
 247 0168 0421     		mov	r1, #4
 248 016a 0A43     		orr	r2, r1
 249 016c D2B2     		uxtb	r2, r2
 250 016e D2B2     		uxtb	r2, r2
 251 0170 DA70     		strb	r2, [r3, #3]
 174:../Generated_Code/AS1.c ****   UART0_PDD_EnableInterrupt(UART0_BASE_PTR, ( UART0_PDD_INTERRUPT_RECEIVER )); /* Enable interrupts
 252              		.loc 1 174 0
 253 0172 114B     		ldr	r3, .L2+28
 254 0174 104A     		ldr	r2, .L2+28
 255 0176 D278     		ldrb	r2, [r2, #3]
 256 0178 D2B2     		uxtb	r2, r2
 257 017a 2021     		mov	r1, #32
 258 017c 0A43     		orr	r2, r1
 259 017e D2B2     		uxtb	r2, r2
 260 0180 DA70     		strb	r2, [r3, #3]
 261 0182 0D4B     		ldr	r3, .L2+28
 262 0184 0C4A     		ldr	r2, .L2+28
 263 0186 9279     		ldrb	r2, [r2, #6]
 264 0188 D2B2     		uxtb	r2, r2
 265 018a 9A71     		strb	r2, [r3, #6]
 175:../Generated_Code/AS1.c ****   /* Registration of the device structure */
 176:../Generated_Code/AS1.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_AS1_ID,DeviceDataPrv);
 266              		.loc 1 176 0
 267 018c 0D4B     		ldr	r3, .L2+40
 268 018e FA68     		ldr	r2, [r7, #12]
 269 0190 1A60     		str	r2, [r3]
 177:../Generated_Code/AS1.c ****   return ((LDD_TDeviceData *)DeviceDataPrv);
 270              		.loc 1 177 0
 271 0192 FB68     		ldr	r3, [r7, #12]
 178:../Generated_Code/AS1.c **** }
 272              		.loc 1 178 0
 273 0194 181C     		mov	r0, r3
 274 0196 BD46     		mov	sp, r7
 275 0198 04B0     		add	sp, sp, #16
 276              		@ sp needed for prologue
 277 019a 80BD     		pop	{r7, pc}
 278              	.L3:
 279              		.align	2
 280              	.L2:
 281 019c 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
 282 01a0 00000000 		.word	AS1_Interrupt
 283 01a4 00700440 		.word	1074032640
 284 01a8 34100000 		.word	4148
 285 01ac 00900440 		.word	1074040832
 286 01b0 FFF8FFFE 		.word	-16779009
 287 01b4 00E100E0 		.word	-536813312
 288 01b8 00A00640 		.word	1074176000
 289 01bc 04100000 		.word	4100
 290 01c0 FFFFFFF3 		.word	-201326593
 291 01c4 00000000 		.word	PE_LDD_DeviceDataList
 292              		.cfi_endproc
 293              	.LFE0:
 295              		.section	.text.AS1_Deinit,"ax",%progbits
 296              		.align	2
 297              		.global	AS1_Deinit
 298              		.code	16
 299              		.thumb_func
 301              	AS1_Deinit:
 302              	.LFB1:
 179:../Generated_Code/AS1.c **** 
 180:../Generated_Code/AS1.c **** /*
 181:../Generated_Code/AS1.c **** ** ===================================================================
 182:../Generated_Code/AS1.c **** **     Method      :  AS1_Deinit (component Serial_LDD)
 183:../Generated_Code/AS1.c **** **
 184:../Generated_Code/AS1.c **** **     Description :
 185:../Generated_Code/AS1.c **** **          Deinitializes the device. Switches off the device, frees
 186:../Generated_Code/AS1.c **** **         the device data structure memory, interrupts vectors, etc.
 187:../Generated_Code/AS1.c **** **     Parameters  :
 188:../Generated_Code/AS1.c **** **         NAME            - DESCRIPTION
 189:../Generated_Code/AS1.c **** **       * DeviceDataPtr   - Device data structure
 190:../Generated_Code/AS1.c **** **                           pointer returned by <Init> method.
 191:../Generated_Code/AS1.c **** **     Returns     : Nothing
 192:../Generated_Code/AS1.c **** ** ===================================================================
 193:../Generated_Code/AS1.c **** */
 194:../Generated_Code/AS1.c **** void AS1_Deinit(LDD_TDeviceData *DeviceDataPtr)
 195:../Generated_Code/AS1.c **** {
 303              		.loc 1 195 0
 304              		.cfi_startproc
 305 0000 80B5     		push	{r7, lr}
 306              	.LCFI3:
 307              		.cfi_def_cfa_offset 8
 308              		.cfi_offset 7, -8
 309              		.cfi_offset 14, -4
 310 0002 84B0     		sub	sp, sp, #16
 311              	.LCFI4:
 312              		.cfi_def_cfa_offset 24
 313 0004 00AF     		add	r7, sp, #0
 314              	.LCFI5:
 315              		.cfi_def_cfa_register 7
 316 0006 7860     		str	r0, [r7, #4]
 196:../Generated_Code/AS1.c ****   AS1_TDeviceDataPtr DeviceDataPrv = (AS1_TDeviceDataPtr)DeviceDataPtr;
 317              		.loc 1 196 0
 318 0008 7B68     		ldr	r3, [r7, #4]
 319 000a FB60     		str	r3, [r7, #12]
 197:../Generated_Code/AS1.c **** 
 198:../Generated_Code/AS1.c ****   (void)DeviceDataPrv;
 199:../Generated_Code/AS1.c ****   UART0_PDD_DisableInterrupt(UART0_BASE_PTR, ( UART0_PDD_INTERRUPT_RECEIVER | UART0_PDD_INTERRUPT_T
 320              		.loc 1 199 0
 321 000c 184B     		ldr	r3, .L5
 322 000e 184A     		ldr	r2, .L5
 323 0010 D278     		ldrb	r2, [r2, #3]
 324 0012 D1B2     		uxtb	r1, r2
 325 0014 5F22     		mov	r2, #95
 326 0016 0A40     		and	r2, r1
 327 0018 D2B2     		uxtb	r2, r2
 328 001a DA70     		strb	r2, [r3, #3]
 329 001c 144B     		ldr	r3, .L5
 330 001e 144A     		ldr	r2, .L5
 331 0020 9279     		ldrb	r2, [r2, #6]
 332 0022 D2B2     		uxtb	r2, r2
 333 0024 9A71     		strb	r2, [r3, #6]
 200:../Generated_Code/AS1.c ****   UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
 334              		.loc 1 200 0
 335 0026 124B     		ldr	r3, .L5
 336 0028 114A     		ldr	r2, .L5
 337 002a D278     		ldrb	r2, [r2, #3]
 338 002c D2B2     		uxtb	r2, r2
 339 002e 0821     		mov	r1, #8
 340 0030 8A43     		bic	r2, r1
 341 0032 D2B2     		uxtb	r2, r2
 342 0034 DA70     		strb	r2, [r3, #3]
 201:../Generated_Code/AS1.c ****   UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
 343              		.loc 1 201 0
 344 0036 0E4B     		ldr	r3, .L5
 345 0038 0D4A     		ldr	r2, .L5
 346 003a D278     		ldrb	r2, [r2, #3]
 347 003c D2B2     		uxtb	r2, r2
 348 003e 0421     		mov	r1, #4
 349 0040 8A43     		bic	r2, r1
 350 0042 D2B2     		uxtb	r2, r2
 351 0044 DA70     		strb	r2, [r3, #3]
 202:../Generated_Code/AS1.c ****   /* {MQXLite RTOS Adapter} Restore interrupt vector (function handler and ISR parameter) */
 203:../Generated_Code/AS1.c ****   /* Note: Exception handler for interrupt is not restored, because it was not modified */
 204:../Generated_Code/AS1.c ****   (void)_int_install_isr(LDD_ivIndex_INT_UART0, DeviceDataPrv->SavedISRSettings.isrFunction, Device
 352              		.loc 1 204 0
 353 0046 FB68     		ldr	r3, [r7, #12]
 354 0048 5A69     		ldr	r2, [r3, #20]
 355 004a FB68     		ldr	r3, [r7, #12]
 356 004c 9B69     		ldr	r3, [r3, #24]
 357 004e 1C20     		mov	r0, #28
 358 0050 111C     		mov	r1, r2
 359 0052 1A1C     		mov	r2, r3
 360 0054 FFF7FEFF 		bl	_int_install_isr
 205:../Generated_Code/AS1.c ****   /* Disable clock gate */
 206:../Generated_Code/AS1.c ****   /* SIM_SCGC4: UART0=0 */
 207:../Generated_Code/AS1.c ****   SIM_SCGC4 &= (uint32_t)~(uint32_t)(SIM_SCGC4_UART0_MASK);                                        
 361              		.loc 1 207 0
 362 0058 064A     		ldr	r2, .L5+4
 363 005a 0649     		ldr	r1, .L5+4
 364 005c 064B     		ldr	r3, .L5+8
 365 005e CB58     		ldr	r3, [r1, r3]
 366 0060 191C     		mov	r1, r3
 367 0062 064B     		ldr	r3, .L5+12
 368 0064 1940     		and	r1, r3
 369 0066 044B     		ldr	r3, .L5+8
 370 0068 D150     		str	r1, [r2, r3]
 208:../Generated_Code/AS1.c ****   /* {MQXLite RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no dealloc
 209:../Generated_Code/AS1.c **** }
 371              		.loc 1 209 0
 372 006a BD46     		mov	sp, r7
 373 006c 04B0     		add	sp, sp, #16
 374              		@ sp needed for prologue
 375 006e 80BD     		pop	{r7, pc}
 376              	.L6:
 377              		.align	2
 378              	.L5:
 379 0070 00A00640 		.word	1074176000
 380 0074 00700440 		.word	1074032640
 381 0078 34100000 		.word	4148
 382 007c FFFBFFFF 		.word	-1025
 383              		.cfi_endproc
 384              	.LFE1:
 386              		.section	.text.AS1_ReceiveBlock,"ax",%progbits
 387              		.align	2
 388              		.global	AS1_ReceiveBlock
 389              		.code	16
 390              		.thumb_func
 392              	AS1_ReceiveBlock:
 393              	.LFB2:
 210:../Generated_Code/AS1.c **** 
 211:../Generated_Code/AS1.c **** /*
 212:../Generated_Code/AS1.c **** ** ===================================================================
 213:../Generated_Code/AS1.c **** **     Method      :  AS1_ReceiveBlock (component Serial_LDD)
 214:../Generated_Code/AS1.c **** **
 215:../Generated_Code/AS1.c **** **     Description :
 216:../Generated_Code/AS1.c **** **         Specifies the number of data to receive. The method returns
 217:../Generated_Code/AS1.c **** **         ERR_BUSY until the specified number of characters is
 218:../Generated_Code/AS1.c **** **         received. Method <CancelBlockReception> can be used to
 219:../Generated_Code/AS1.c **** **         cancel a running receive operation.
 220:../Generated_Code/AS1.c **** **     Parameters  :
 221:../Generated_Code/AS1.c **** **         NAME            - DESCRIPTION
 222:../Generated_Code/AS1.c **** **       * DeviceDataPtr   - Device data structure
 223:../Generated_Code/AS1.c **** **                           pointer returned by <Init> method.
 224:../Generated_Code/AS1.c **** **       * BufferPtr       - Pointer to a buffer where
 225:../Generated_Code/AS1.c **** **                           received characters will be stored.
 226:../Generated_Code/AS1.c **** **         Size            - Number of characters to receive
 227:../Generated_Code/AS1.c **** **     Returns     :
 228:../Generated_Code/AS1.c **** **         ---             - Error code, possible codes:
 229:../Generated_Code/AS1.c **** **                           ERR_OK - OK
 230:../Generated_Code/AS1.c **** **                           ERR_SPEED - The component does not work in
 231:../Generated_Code/AS1.c **** **                           the active clock configuration.
 232:../Generated_Code/AS1.c **** **                           ERR_DISABLED - The component or device is
 233:../Generated_Code/AS1.c **** **                           disabled.
 234:../Generated_Code/AS1.c **** **                           ERR_BUSY - The previous receive request is
 235:../Generated_Code/AS1.c **** **                           pending.
 236:../Generated_Code/AS1.c **** ** ===================================================================
 237:../Generated_Code/AS1.c **** */
 238:../Generated_Code/AS1.c **** LDD_TError AS1_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
 239:../Generated_Code/AS1.c **** {
 394              		.loc 1 239 0
 395              		.cfi_startproc
 396 0000 80B5     		push	{r7, lr}
 397              	.LCFI6:
 398              		.cfi_def_cfa_offset 8
 399              		.cfi_offset 7, -8
 400              		.cfi_offset 14, -4
 401 0002 86B0     		sub	sp, sp, #24
 402              	.LCFI7:
 403              		.cfi_def_cfa_offset 32
 404 0004 00AF     		add	r7, sp, #0
 405              	.LCFI8:
 406              		.cfi_def_cfa_register 7
 407 0006 F860     		str	r0, [r7, #12]
 408 0008 B960     		str	r1, [r7, #8]
 409 000a BB1D     		add	r3, r7, #6
 410 000c 1A80     		strh	r2, [r3]
 240:../Generated_Code/AS1.c ****   AS1_TDeviceDataPtr DeviceDataPrv = (AS1_TDeviceDataPtr)DeviceDataPtr;
 411              		.loc 1 240 0
 412 000e FB68     		ldr	r3, [r7, #12]
 413 0010 7B61     		str	r3, [r7, #20]
 241:../Generated_Code/AS1.c **** 
 242:../Generated_Code/AS1.c ****   if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
 414              		.loc 1 242 0
 415 0012 BB1D     		add	r3, r7, #6
 416 0014 1B88     		ldrh	r3, [r3]
 417 0016 002B     		cmp	r3, #0
 418 0018 01D1     		bne	.L8
 243:../Generated_Code/AS1.c ****     return ERR_PARAM_SIZE;             /* If no then error */
 419              		.loc 1 243 0
 420 001a 8423     		mov	r3, #132
 421 001c 14E0     		b	.L9
 422              	.L8:
 244:../Generated_Code/AS1.c ****   }
 245:../Generated_Code/AS1.c ****   if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the previous receive operation pending? */
 423              		.loc 1 245 0
 424 001e 7B69     		ldr	r3, [r7, #20]
 425 0020 1B89     		ldrh	r3, [r3, #8]
 426 0022 002B     		cmp	r3, #0
 427 0024 01D0     		beq	.L10
 246:../Generated_Code/AS1.c ****     return ERR_BUSY;                   /* If yes then error */
 428              		.loc 1 246 0
 429 0026 0823     		mov	r3, #8
 430 0028 0EE0     		b	.L9
 431              	.L10:
 247:../Generated_Code/AS1.c ****   }
 248:../Generated_Code/AS1.c ****   /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS A
 249:../Generated_Code/AS1.c ****   _int_disable();
 432              		.loc 1 249 0
 433 002a FFF7FEFF 		bl	_int_disable
 250:../Generated_Code/AS1.c ****   DeviceDataPrv->InpDataPtr = BufferPtr; /* Store a pointer to the input data. */
 434              		.loc 1 250 0
 435 002e 7B69     		ldr	r3, [r7, #20]
 436 0030 BA68     		ldr	r2, [r7, #8]
 437 0032 5A60     		str	r2, [r3, #4]
 251:../Generated_Code/AS1.c ****   DeviceDataPrv->InpDataNumReq = Size; /* Store a number of characters to be received. */
 438              		.loc 1 251 0
 439 0034 7B69     		ldr	r3, [r7, #20]
 440 0036 BA1D     		add	r2, r7, #6
 441 0038 1288     		ldrh	r2, [r2]
 442 003a 1A81     		strh	r2, [r3, #8]
 252:../Generated_Code/AS1.c ****   DeviceDataPrv->InpRecvDataNum = 0x00U; /* Set number of received characters to zero. */
 443              		.loc 1 252 0
 444 003c 7B69     		ldr	r3, [r7, #20]
 445 003e 0022     		mov	r2, #0
 446 0040 5A80     		strh	r2, [r3, #2]
 253:../Generated_Code/AS1.c ****   /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Ad
 254:../Generated_Code/AS1.c ****   _int_enable();
 447              		.loc 1 254 0
 448 0042 FFF7FEFF 		bl	_int_enable
 255:../Generated_Code/AS1.c ****   return ERR_OK;                       /* OK */
 449              		.loc 1 255 0
 450 0046 0023     		mov	r3, #0
 451              	.L9:
 256:../Generated_Code/AS1.c **** }
 452              		.loc 1 256 0
 453 0048 181C     		mov	r0, r3
 454 004a BD46     		mov	sp, r7
 455 004c 06B0     		add	sp, sp, #24
 456              		@ sp needed for prologue
 457 004e 80BD     		pop	{r7, pc}
 458              		.cfi_endproc
 459              	.LFE2:
 461              		.section	.text.AS1_SendBlock,"ax",%progbits
 462              		.align	2
 463              		.global	AS1_SendBlock
 464              		.code	16
 465              		.thumb_func
 467              	AS1_SendBlock:
 468              	.LFB3:
 257:../Generated_Code/AS1.c **** 
 258:../Generated_Code/AS1.c **** /*
 259:../Generated_Code/AS1.c **** ** ===================================================================
 260:../Generated_Code/AS1.c **** **     Method      :  AS1_SendBlock (component Serial_LDD)
 261:../Generated_Code/AS1.c **** **
 262:../Generated_Code/AS1.c **** **     Description :
 263:../Generated_Code/AS1.c **** **         Sends a block of characters. The method returns ERR_BUSY
 264:../Generated_Code/AS1.c **** **         when the previous block transmission is not completed.
 265:../Generated_Code/AS1.c **** **         Method <CancelBlockTransmission> can be used to cancel a
 266:../Generated_Code/AS1.c **** **         transmit operation. This method is available only if the
 267:../Generated_Code/AS1.c **** **         transmitter property is enabled.
 268:../Generated_Code/AS1.c **** **     Parameters  :
 269:../Generated_Code/AS1.c **** **         NAME            - DESCRIPTION
 270:../Generated_Code/AS1.c **** **       * DeviceDataPtr   - Device data structure
 271:../Generated_Code/AS1.c **** **                           pointer returned by <Init> method.
 272:../Generated_Code/AS1.c **** **       * BufferPtr       - Pointer to a buffer from where
 273:../Generated_Code/AS1.c **** **                           data will be sent.
 274:../Generated_Code/AS1.c **** **         Size            - Number of characters in the buffer.
 275:../Generated_Code/AS1.c **** **     Returns     :
 276:../Generated_Code/AS1.c **** **         ---             - Error code, possible codes:
 277:../Generated_Code/AS1.c **** **                           ERR_OK - OK
 278:../Generated_Code/AS1.c **** **                           ERR_SPEED - The component does not work in
 279:../Generated_Code/AS1.c **** **                           the active clock configuration.
 280:../Generated_Code/AS1.c **** **                           ERR_DISABLED - The component or device is
 281:../Generated_Code/AS1.c **** **                           disabled.
 282:../Generated_Code/AS1.c **** **                           ERR_BUSY - The previous transmit request is
 283:../Generated_Code/AS1.c **** **                           pending.
 284:../Generated_Code/AS1.c **** ** ===================================================================
 285:../Generated_Code/AS1.c **** */
 286:../Generated_Code/AS1.c **** LDD_TError AS1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
 287:../Generated_Code/AS1.c **** {
 469              		.loc 1 287 0
 470              		.cfi_startproc
 471 0000 80B5     		push	{r7, lr}
 472              	.LCFI9:
 473              		.cfi_def_cfa_offset 8
 474              		.cfi_offset 7, -8
 475              		.cfi_offset 14, -4
 476 0002 86B0     		sub	sp, sp, #24
 477              	.LCFI10:
 478              		.cfi_def_cfa_offset 32
 479 0004 00AF     		add	r7, sp, #0
 480              	.LCFI11:
 481              		.cfi_def_cfa_register 7
 482 0006 F860     		str	r0, [r7, #12]
 483 0008 B960     		str	r1, [r7, #8]
 484 000a BB1D     		add	r3, r7, #6
 485 000c 1A80     		strh	r2, [r3]
 288:../Generated_Code/AS1.c ****   AS1_TDeviceDataPtr DeviceDataPrv = (AS1_TDeviceDataPtr)DeviceDataPtr;
 486              		.loc 1 288 0
 487 000e FB68     		ldr	r3, [r7, #12]
 488 0010 7B61     		str	r3, [r7, #20]
 289:../Generated_Code/AS1.c **** 
 290:../Generated_Code/AS1.c ****   if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
 489              		.loc 1 290 0
 490 0012 BB1D     		add	r3, r7, #6
 491 0014 1B88     		ldrh	r3, [r3]
 492 0016 002B     		cmp	r3, #0
 493 0018 01D1     		bne	.L12
 291:../Generated_Code/AS1.c ****     return ERR_PARAM_SIZE;             /* If no then error */
 494              		.loc 1 291 0
 495 001a 8423     		mov	r3, #132
 496 001c 29E0     		b	.L13
 497              	.L12:
 292:../Generated_Code/AS1.c ****   }
 293:../Generated_Code/AS1.c ****   if (DeviceDataPrv->OutDataNumReq != 0x00U) { /* Is the previous transmit operation pending? */
 498              		.loc 1 293 0
 499 001e 7B69     		ldr	r3, [r7, #20]
 500 0020 1B8A     		ldrh	r3, [r3, #16]
 501 0022 002B     		cmp	r3, #0
 502 0024 01D0     		beq	.L14
 294:../Generated_Code/AS1.c ****     return ERR_BUSY;                   /* If yes then error */
 503              		.loc 1 294 0
 504 0026 0823     		mov	r3, #8
 505 0028 23E0     		b	.L13
 506              	.L14:
 295:../Generated_Code/AS1.c ****   }
 296:../Generated_Code/AS1.c ****   /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS A
 297:../Generated_Code/AS1.c ****   _int_disable();
 507              		.loc 1 297 0
 508 002a FFF7FEFF 		bl	_int_disable
 298:../Generated_Code/AS1.c ****   DeviceDataPrv->OutDataPtr = BufferPtr; /* Set a pointer to the output data. */
 509              		.loc 1 298 0
 510 002e 7B69     		ldr	r3, [r7, #20]
 511 0030 BA68     		ldr	r2, [r7, #8]
 512 0032 DA60     		str	r2, [r3, #12]
 299:../Generated_Code/AS1.c ****   DeviceDataPrv->OutDataNumReq = Size; /* Set the counter of characters to be sent. */
 513              		.loc 1 299 0
 514 0034 7B69     		ldr	r3, [r7, #20]
 515 0036 BA1D     		add	r2, r7, #6
 516 0038 1288     		ldrh	r2, [r2]
 517 003a 1A82     		strh	r2, [r3, #16]
 300:../Generated_Code/AS1.c ****   DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters. */
 518              		.loc 1 300 0
 519 003c 7B69     		ldr	r3, [r7, #20]
 520 003e 0022     		mov	r2, #0
 521 0040 5A81     		strh	r2, [r3, #10]
 301:../Generated_Code/AS1.c ****   DeviceDataPrv->SerFlag |= ENABLED_TX_INT; /* Set the flag ENABLED_TX_INT */
 522              		.loc 1 301 0
 523 0042 7B69     		ldr	r3, [r7, #20]
 524 0044 1B88     		ldrh	r3, [r3]
 525 0046 0122     		mov	r2, #1
 526 0048 1343     		orr	r3, r2
 527 004a 9AB2     		uxth	r2, r3
 528 004c 7B69     		ldr	r3, [r7, #20]
 529 004e 1A80     		strh	r2, [r3]
 302:../Generated_Code/AS1.c ****   UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Enable TX interrup
 530              		.loc 1 302 0
 531 0050 0A4B     		ldr	r3, .L15
 532 0052 0A4A     		ldr	r2, .L15
 533 0054 D278     		ldrb	r2, [r2, #3]
 534 0056 D2B2     		uxtb	r2, r2
 535 0058 8021     		mov	r1, #128
 536 005a 4942     		neg	r1, r1
 537 005c 0A43     		orr	r2, r1
 538 005e D2B2     		uxtb	r2, r2
 539 0060 DA70     		strb	r2, [r3, #3]
 540 0062 064B     		ldr	r3, .L15
 541 0064 054A     		ldr	r2, .L15
 542 0066 9279     		ldrb	r2, [r2, #6]
 543 0068 D2B2     		uxtb	r2, r2
 544 006a 9A71     		strb	r2, [r3, #6]
 303:../Generated_Code/AS1.c ****   /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Ad
 304:../Generated_Code/AS1.c ****   _int_enable();
 545              		.loc 1 304 0
 546 006c FFF7FEFF 		bl	_int_enable
 305:../Generated_Code/AS1.c ****   return ERR_OK;                       /* OK */
 547              		.loc 1 305 0
 548 0070 0023     		mov	r3, #0
 549              	.L13:
 306:../Generated_Code/AS1.c **** }
 550              		.loc 1 306 0
 551 0072 181C     		mov	r0, r3
 552 0074 BD46     		mov	sp, r7
 553 0076 06B0     		add	sp, sp, #24
 554              		@ sp needed for prologue
 555 0078 80BD     		pop	{r7, pc}
 556              	.L16:
 557 007a C046     		.align	2
 558              	.L15:
 559 007c 00A00640 		.word	1074176000
 560              		.cfi_endproc
 561              	.LFE3:
 563              		.section	.text.AS1_GetReceivedDataNum,"ax",%progbits
 564              		.align	2
 565              		.global	AS1_GetReceivedDataNum
 566              		.code	16
 567              		.thumb_func
 569              	AS1_GetReceivedDataNum:
 570              	.LFB4:
 307:../Generated_Code/AS1.c **** 
 308:../Generated_Code/AS1.c **** /*
 309:../Generated_Code/AS1.c **** ** ===================================================================
 310:../Generated_Code/AS1.c **** **     Method      :  AS1_GetReceivedDataNum (component Serial_LDD)
 311:../Generated_Code/AS1.c **** **
 312:../Generated_Code/AS1.c **** **     Description :
 313:../Generated_Code/AS1.c **** **         Returns the number of received characters in the receive
 314:../Generated_Code/AS1.c **** **         buffer. 
 315:../Generated_Code/AS1.c **** **     Parameters  :
 316:../Generated_Code/AS1.c **** **         NAME            - DESCRIPTION
 317:../Generated_Code/AS1.c **** **       * DeviceDataPtr   - Device data structure
 318:../Generated_Code/AS1.c **** **                           pointer returned by <Init> method.
 319:../Generated_Code/AS1.c **** **     Returns     :
 320:../Generated_Code/AS1.c **** **         ---             - Number of received characters in the
 321:../Generated_Code/AS1.c **** **                           receive buffer.
 322:../Generated_Code/AS1.c **** ** ===================================================================
 323:../Generated_Code/AS1.c **** */
 324:../Generated_Code/AS1.c **** uint16_t AS1_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr)
 325:../Generated_Code/AS1.c **** {
 571              		.loc 1 325 0
 572              		.cfi_startproc
 573 0000 80B5     		push	{r7, lr}
 574              	.LCFI12:
 575              		.cfi_def_cfa_offset 8
 576              		.cfi_offset 7, -8
 577              		.cfi_offset 14, -4
 578 0002 84B0     		sub	sp, sp, #16
 579              	.LCFI13:
 580              		.cfi_def_cfa_offset 24
 581 0004 00AF     		add	r7, sp, #0
 582              	.LCFI14:
 583              		.cfi_def_cfa_register 7
 584 0006 7860     		str	r0, [r7, #4]
 326:../Generated_Code/AS1.c ****   AS1_TDeviceDataPtr DeviceDataPrv = (AS1_TDeviceDataPtr)DeviceDataPtr;
 585              		.loc 1 326 0
 586 0008 7B68     		ldr	r3, [r7, #4]
 587 000a FB60     		str	r3, [r7, #12]
 327:../Generated_Code/AS1.c **** 
 328:../Generated_Code/AS1.c ****   return (DeviceDataPrv->InpRecvDataNum); /* Return the number of received characters. */
 588              		.loc 1 328 0
 589 000c FB68     		ldr	r3, [r7, #12]
 590 000e 5B88     		ldrh	r3, [r3, #2]
 329:../Generated_Code/AS1.c **** }
 591              		.loc 1 329 0
 592 0010 181C     		mov	r0, r3
 593 0012 BD46     		mov	sp, r7
 594 0014 04B0     		add	sp, sp, #16
 595              		@ sp needed for prologue
 596 0016 80BD     		pop	{r7, pc}
 597              		.cfi_endproc
 598              	.LFE4:
 600              		.section	.text.AS1_GetSentDataNum,"ax",%progbits
 601              		.align	2
 602              		.global	AS1_GetSentDataNum
 603              		.code	16
 604              		.thumb_func
 606              	AS1_GetSentDataNum:
 607              	.LFB5:
 330:../Generated_Code/AS1.c **** 
 331:../Generated_Code/AS1.c **** /*
 332:../Generated_Code/AS1.c **** ** ===================================================================
 333:../Generated_Code/AS1.c **** **     Method      :  AS1_GetSentDataNum (component Serial_LDD)
 334:../Generated_Code/AS1.c **** **
 335:../Generated_Code/AS1.c **** **     Description :
 336:../Generated_Code/AS1.c **** **         Returns the number of sent characters.
 337:../Generated_Code/AS1.c **** **     Parameters  :
 338:../Generated_Code/AS1.c **** **         NAME            - DESCRIPTION
 339:../Generated_Code/AS1.c **** **       * DeviceDataPtr   - Device data structure
 340:../Generated_Code/AS1.c **** **                           pointer returned by <Init> method.
 341:../Generated_Code/AS1.c **** **     Returns     :
 342:../Generated_Code/AS1.c **** **         ---             - The number of sent characters.
 343:../Generated_Code/AS1.c **** ** ===================================================================
 344:../Generated_Code/AS1.c **** */
 345:../Generated_Code/AS1.c **** uint16_t AS1_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr)
 346:../Generated_Code/AS1.c **** {
 608              		.loc 1 346 0
 609              		.cfi_startproc
 610 0000 80B5     		push	{r7, lr}
 611              	.LCFI15:
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 7, -8
 614              		.cfi_offset 14, -4
 615 0002 84B0     		sub	sp, sp, #16
 616              	.LCFI16:
 617              		.cfi_def_cfa_offset 24
 618 0004 00AF     		add	r7, sp, #0
 619              	.LCFI17:
 620              		.cfi_def_cfa_register 7
 621 0006 7860     		str	r0, [r7, #4]
 347:../Generated_Code/AS1.c ****   AS1_TDeviceDataPtr DeviceDataPrv = (AS1_TDeviceDataPtr)DeviceDataPtr;
 622              		.loc 1 347 0
 623 0008 7B68     		ldr	r3, [r7, #4]
 624 000a FB60     		str	r3, [r7, #12]
 348:../Generated_Code/AS1.c **** 
 349:../Generated_Code/AS1.c ****   return (DeviceDataPrv->OutSentDataNum); /* Return the number of sent characters. */
 625              		.loc 1 349 0
 626 000c FB68     		ldr	r3, [r7, #12]
 627 000e 5B89     		ldrh	r3, [r3, #10]
 350:../Generated_Code/AS1.c **** }
 628              		.loc 1 350 0
 629 0010 181C     		mov	r0, r3
 630 0012 BD46     		mov	sp, r7
 631 0014 04B0     		add	sp, sp, #16
 632              		@ sp needed for prologue
 633 0016 80BD     		pop	{r7, pc}
 634              		.cfi_endproc
 635              	.LFE5:
 637              		.section	.text.InterruptRx,"ax",%progbits
 638              		.align	2
 639              		.code	16
 640              		.thumb_func
 642              	InterruptRx:
 643              	.LFB6:
 351:../Generated_Code/AS1.c **** 
 352:../Generated_Code/AS1.c **** /*
 353:../Generated_Code/AS1.c **** ** ===================================================================
 354:../Generated_Code/AS1.c **** **     Method      :  InterruptRx (component Serial_LDD)
 355:../Generated_Code/AS1.c **** **
 356:../Generated_Code/AS1.c **** **     Description :
 357:../Generated_Code/AS1.c **** **         The method services the receive interrupt of the selected 
 358:../Generated_Code/AS1.c **** **         peripheral(s) and eventually invokes the bean's event(s).
 359:../Generated_Code/AS1.c **** **         This method is internal. It is used by Processor Expert only.
 360:../Generated_Code/AS1.c **** ** ===================================================================
 361:../Generated_Code/AS1.c **** */
 362:../Generated_Code/AS1.c **** static void InterruptRx(AS1_TDeviceDataPtr DeviceDataPrv)
 363:../Generated_Code/AS1.c **** {
 644              		.loc 1 363 0
 645              		.cfi_startproc
 646 0000 90B5     		push	{r4, r7, lr}
 647              	.LCFI18:
 648              		.cfi_def_cfa_offset 12
 649              		.cfi_offset 4, -12
 650              		.cfi_offset 7, -8
 651              		.cfi_offset 14, -4
 652 0002 83B0     		sub	sp, sp, #12
 653              	.LCFI19:
 654              		.cfi_def_cfa_offset 24
 655 0004 00AF     		add	r7, sp, #0
 656              	.LCFI20:
 657              		.cfi_def_cfa_register 7
 658 0006 7860     		str	r0, [r7, #4]
 364:../Generated_Code/AS1.c ****   register uint16_t Data;              /* Temporary variable for data */
 365:../Generated_Code/AS1.c **** 
 366:../Generated_Code/AS1.c ****   Data = (uint16_t)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Read an 8-bit character from the receiver
 659              		.loc 1 366 0
 660 0008 124B     		ldr	r3, .L21
 661 000a DB79     		ldrb	r3, [r3, #7]
 662 000c DBB2     		uxtb	r3, r3
 663 000e 1C1C     		mov	r4, r3
 367:../Generated_Code/AS1.c ****   if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
 664              		.loc 1 367 0
 665 0010 7B68     		ldr	r3, [r7, #4]
 666 0012 1B89     		ldrh	r3, [r3, #8]
 667 0014 002B     		cmp	r3, #0
 668 0016 1AD0     		beq	.L19
 368:../Generated_Code/AS1.c ****     *(DeviceDataPrv->InpDataPtr++) = (uint8_t)Data; /* Put an 8-bit character to the receive buffer
 669              		.loc 1 368 0
 670 0018 7B68     		ldr	r3, [r7, #4]
 671 001a 5B68     		ldr	r3, [r3, #4]
 672 001c E2B2     		uxtb	r2, r4
 673 001e 1A70     		strb	r2, [r3]
 674 0020 5A1C     		add	r2, r3, #1
 675 0022 7B68     		ldr	r3, [r7, #4]
 676 0024 5A60     		str	r2, [r3, #4]
 369:../Generated_Code/AS1.c ****     DeviceDataPrv->InpRecvDataNum++;   /* Increment received char. counter */
 677              		.loc 1 369 0
 678 0026 7B68     		ldr	r3, [r7, #4]
 679 0028 5B88     		ldrh	r3, [r3, #2]
 680 002a 0133     		add	r3, r3, #1
 681 002c 9AB2     		uxth	r2, r3
 682 002e 7B68     		ldr	r3, [r7, #4]
 683 0030 5A80     		strh	r2, [r3, #2]
 370:../Generated_Code/AS1.c ****     if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested number
 684              		.loc 1 370 0
 685 0032 7B68     		ldr	r3, [r7, #4]
 686 0034 5A88     		ldrh	r2, [r3, #2]
 687 0036 7B68     		ldr	r3, [r7, #4]
 688 0038 1B89     		ldrh	r3, [r3, #8]
 689 003a 9A42     		cmp	r2, r3
 690 003c 07D1     		bne	.L19
 371:../Generated_Code/AS1.c ****       DeviceDataPrv->InpDataNumReq = 0x00U; /* If yes then clear number of requested characters to 
 691              		.loc 1 371 0
 692 003e 7B68     		ldr	r3, [r7, #4]
 693 0040 0022     		mov	r2, #0
 694 0042 1A81     		strh	r2, [r3, #8]
 372:../Generated_Code/AS1.c ****       AS1_OnBlockReceived(DeviceDataPrv->UserDataPtr);
 695              		.loc 1 372 0
 696 0044 7B68     		ldr	r3, [r7, #4]
 697 0046 DB69     		ldr	r3, [r3, #28]
 698 0048 181C     		mov	r0, r3
 699 004a FFF7FEFF 		bl	AS1_OnBlockReceived
 700              	.L19:
 373:../Generated_Code/AS1.c ****     }
 374:../Generated_Code/AS1.c ****   }
 375:../Generated_Code/AS1.c **** }
 701              		.loc 1 375 0
 702 004e BD46     		mov	sp, r7
 703 0050 03B0     		add	sp, sp, #12
 704              		@ sp needed for prologue
 705 0052 90BD     		pop	{r4, r7, pc}
 706              	.L22:
 707              		.align	2
 708              	.L21:
 709 0054 00A00640 		.word	1074176000
 710              		.cfi_endproc
 711              	.LFE6:
 713              		.section	.text.InterruptTx,"ax",%progbits
 714              		.align	2
 715              		.code	16
 716              		.thumb_func
 718              	InterruptTx:
 719              	.LFB7:
 376:../Generated_Code/AS1.c **** 
 377:../Generated_Code/AS1.c **** /*
 378:../Generated_Code/AS1.c **** ** ===================================================================
 379:../Generated_Code/AS1.c **** **     Method      :  InterruptTx (component Serial_LDD)
 380:../Generated_Code/AS1.c **** **
 381:../Generated_Code/AS1.c **** **     Description :
 382:../Generated_Code/AS1.c **** **         The method services the receive interrupt of the selected 
 383:../Generated_Code/AS1.c **** **         peripheral(s) and eventually invokes the bean's event(s).
 384:../Generated_Code/AS1.c **** **         This method is internal. It is used by Processor Expert only.
 385:../Generated_Code/AS1.c **** ** ===================================================================
 386:../Generated_Code/AS1.c **** */
 387:../Generated_Code/AS1.c **** static void InterruptTx(AS1_TDeviceDataPtr DeviceDataPrv)
 388:../Generated_Code/AS1.c **** {
 720              		.loc 1 388 0
 721              		.cfi_startproc
 722 0000 80B5     		push	{r7, lr}
 723              	.LCFI21:
 724              		.cfi_def_cfa_offset 8
 725              		.cfi_offset 7, -8
 726              		.cfi_offset 14, -4
 727 0002 82B0     		sub	sp, sp, #8
 728              	.LCFI22:
 729              		.cfi_def_cfa_offset 16
 730 0004 00AF     		add	r7, sp, #0
 731              	.LCFI23:
 732              		.cfi_def_cfa_register 7
 733 0006 7860     		str	r0, [r7, #4]
 389:../Generated_Code/AS1.c **** 
 390:../Generated_Code/AS1.c ****   if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent characte
 734              		.loc 1 390 0
 735 0008 7B68     		ldr	r3, [r7, #4]
 736 000a 5A89     		ldrh	r2, [r3, #10]
 737 000c 7B68     		ldr	r3, [r7, #4]
 738 000e 1B8A     		ldrh	r3, [r3, #16]
 739 0010 9A42     		cmp	r2, r3
 740 0012 1CD2     		bcs	.L24
 391:../Generated_Code/AS1.c ****     UART0_PDD_PutChar8(UART0_BASE_PTR, *(DeviceDataPrv->OutDataPtr++)); /* Put a 8-bit character to
 741              		.loc 1 391 0
 742 0014 194A     		ldr	r2, .L26
 743 0016 7B68     		ldr	r3, [r7, #4]
 744 0018 DB68     		ldr	r3, [r3, #12]
 745 001a 1978     		ldrb	r1, [r3]
 746 001c D171     		strb	r1, [r2, #7]
 747 001e 5A1C     		add	r2, r3, #1
 748 0020 7B68     		ldr	r3, [r7, #4]
 749 0022 DA60     		str	r2, [r3, #12]
 392:../Generated_Code/AS1.c ****     DeviceDataPrv->OutSentDataNum++;   /* Increment the counter of sent characters. */
 750              		.loc 1 392 0
 751 0024 7B68     		ldr	r3, [r7, #4]
 752 0026 5B89     		ldrh	r3, [r3, #10]
 753 0028 0133     		add	r3, r3, #1
 754 002a 9AB2     		uxth	r2, r3
 755 002c 7B68     		ldr	r3, [r7, #4]
 756 002e 5A81     		strh	r2, [r3, #10]
 393:../Generated_Code/AS1.c ****     if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
 757              		.loc 1 393 0
 758 0030 7B68     		ldr	r3, [r7, #4]
 759 0032 5A89     		ldrh	r2, [r3, #10]
 760 0034 7B68     		ldr	r3, [r7, #4]
 761 0036 1B8A     		ldrh	r3, [r3, #16]
 762 0038 9A42     		cmp	r2, r3
 763 003a 1CD1     		bne	.L23
 394:../Generated_Code/AS1.c ****       DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBl
 764              		.loc 1 394 0
 765 003c 7B68     		ldr	r3, [r7, #4]
 766 003e 0022     		mov	r2, #0
 767 0040 1A82     		strh	r2, [r3, #16]
 395:../Generated_Code/AS1.c ****       AS1_OnBlockSent(DeviceDataPrv->UserDataPtr);
 768              		.loc 1 395 0
 769 0042 7B68     		ldr	r3, [r7, #4]
 770 0044 DB69     		ldr	r3, [r3, #28]
 771 0046 181C     		mov	r0, r3
 772 0048 FFF7FEFF 		bl	AS1_OnBlockSent
 773 004c 13E0     		b	.L23
 774              	.L24:
 396:../Generated_Code/AS1.c ****     }
 397:../Generated_Code/AS1.c ****   } else {
 398:../Generated_Code/AS1.c ****     UART0_PDD_DisableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Disable TX inte
 775              		.loc 1 398 0
 776 004e 0B4B     		ldr	r3, .L26
 777 0050 0A4A     		ldr	r2, .L26
 778 0052 D278     		ldrb	r2, [r2, #3]
 779 0054 D1B2     		uxtb	r1, r2
 780 0056 7F22     		mov	r2, #127
 781 0058 0A40     		and	r2, r1
 782 005a D2B2     		uxtb	r2, r2
 783 005c DA70     		strb	r2, [r3, #3]
 784 005e 074B     		ldr	r3, .L26
 785 0060 064A     		ldr	r2, .L26
 786 0062 9279     		ldrb	r2, [r2, #6]
 787 0064 D2B2     		uxtb	r2, r2
 788 0066 9A71     		strb	r2, [r3, #6]
 399:../Generated_Code/AS1.c ****     DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)ENABLED_TX_INT); /* Clear the flag ENABLED_TX_I
 789              		.loc 1 399 0
 790 0068 7B68     		ldr	r3, [r7, #4]
 791 006a 1B88     		ldrh	r3, [r3]
 792 006c 0122     		mov	r2, #1
 793 006e 9343     		bic	r3, r2
 794 0070 9AB2     		uxth	r2, r3
 795 0072 7B68     		ldr	r3, [r7, #4]
 796 0074 1A80     		strh	r2, [r3]
 797              	.L23:
 400:../Generated_Code/AS1.c ****   }
 401:../Generated_Code/AS1.c **** }
 798              		.loc 1 401 0
 799 0076 BD46     		mov	sp, r7
 800 0078 02B0     		add	sp, sp, #8
 801              		@ sp needed for prologue
 802 007a 80BD     		pop	{r7, pc}
 803              	.L27:
 804              		.align	2
 805              	.L26:
 806 007c 00A00640 		.word	1074176000
 807              		.cfi_endproc
 808              	.LFE7:
 810              		.section	.text.AS1_Interrupt,"ax",%progbits
 811              		.align	2
 812              		.global	AS1_Interrupt
 813              		.code	16
 814              		.thumb_func
 816              	AS1_Interrupt:
 817              	.LFB8:
 402:../Generated_Code/AS1.c **** 
 403:../Generated_Code/AS1.c **** /*
 404:../Generated_Code/AS1.c **** ** ===================================================================
 405:../Generated_Code/AS1.c **** **     Method      :  AS1_Interrupt (component Serial_LDD)
 406:../Generated_Code/AS1.c **** **
 407:../Generated_Code/AS1.c **** **     Description :
 408:../Generated_Code/AS1.c **** **         The ISR function handling the device receive/transmit 
 409:../Generated_Code/AS1.c **** **         interrupt. Calls InterruptTX/InterruptRX methods.
 410:../Generated_Code/AS1.c **** **         This method is internal. It is used by Processor Expert only.
 411:../Generated_Code/AS1.c **** ** ===================================================================
 412:../Generated_Code/AS1.c **** */
 413:../Generated_Code/AS1.c **** void AS1_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
 414:../Generated_Code/AS1.c **** {
 818              		.loc 1 414 0
 819              		.cfi_startproc
 820 0000 90B5     		push	{r4, r7, lr}
 821              	.LCFI24:
 822              		.cfi_def_cfa_offset 12
 823              		.cfi_offset 4, -12
 824              		.cfi_offset 7, -8
 825              		.cfi_offset 14, -4
 826 0002 85B0     		sub	sp, sp, #20
 827              	.LCFI25:
 828              		.cfi_def_cfa_offset 32
 829 0004 00AF     		add	r7, sp, #0
 830              	.LCFI26:
 831              		.cfi_def_cfa_register 7
 832 0006 7860     		str	r0, [r7, #4]
 415:../Generated_Code/AS1.c ****   /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
 416:../Generated_Code/AS1.c ****   AS1_TDeviceDataPtr DeviceDataPrv = (AS1_TDeviceDataPtr)_isrParameter;
 833              		.loc 1 416 0
 834 0008 7B68     		ldr	r3, [r7, #4]
 835 000a FB60     		str	r3, [r7, #12]
 417:../Generated_Code/AS1.c ****   register uint16_t StatReg = UART0_PDD_ReadInterruptStatusReg(UART0_BASE_PTR); /* Read status regi
 836              		.loc 1 417 0
 837 000c 164B     		ldr	r3, .L32
 838 000e 1B79     		ldrb	r3, [r3, #4]
 839 0010 DBB2     		uxtb	r3, r3
 840 0012 1C1C     		mov	r4, r3
 418:../Generated_Code/AS1.c **** 
 419:../Generated_Code/AS1.c ****   if (StatReg & (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK)) { /* I
 841              		.loc 1 419 0
 842 0014 221C     		mov	r2, r4
 843 0016 0F23     		mov	r3, #15
 844 0018 1340     		and	r3, r2
 845 001a 09D0     		beq	.L29
 420:../Generated_Code/AS1.c ****     UART0_PDD_ClearInterruptFlags(UART0_BASE_PTR, (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_F
 846              		.loc 1 420 0
 847 001c 124B     		ldr	r3, .L32
 848 001e 0F22     		mov	r2, #15
 849 0020 1A71     		strb	r2, [r3, #4]
 421:../Generated_Code/AS1.c ****     (void)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Dummy read 8-bit character from receiver */
 850              		.loc 1 421 0
 851 0022 114B     		ldr	r3, .L32
 852 0024 DB79     		ldrb	r3, [r3, #7]
 422:../Generated_Code/AS1.c ****     StatReg &= (uint16_t)(~(uint16_t)UART0_S1_RDRF_MASK); /* Clear the receive data flag to discard
 853              		.loc 1 422 0
 854 0026 2023     		mov	r3, #32
 855 0028 221C     		mov	r2, r4
 856 002a 9A43     		bic	r2, r3
 857 002c 131C     		mov	r3, r2
 858 002e 9CB2     		uxth	r4, r3
 859              	.L29:
 423:../Generated_Code/AS1.c ****   }
 424:../Generated_Code/AS1.c ****   if (StatReg & UART0_S1_RDRF_MASK) {  /* Is the receiver's interrupt flag set? */
 860              		.loc 1 424 0
 861 0030 221C     		mov	r2, r4
 862 0032 2023     		mov	r3, #32
 863 0034 1340     		and	r3, r2
 864 0036 03D0     		beq	.L30
 425:../Generated_Code/AS1.c ****     InterruptRx(DeviceDataPrv);        /* If yes, then invoke the internal service routine. This ro
 865              		.loc 1 425 0
 866 0038 FB68     		ldr	r3, [r7, #12]
 867 003a 181C     		mov	r0, r3
 868 003c FFF7FEFF 		bl	InterruptRx
 869              	.L30:
 426:../Generated_Code/AS1.c ****   }
 427:../Generated_Code/AS1.c ****   if (DeviceDataPrv->SerFlag & ENABLED_TX_INT) { /* Is the transmitter interrupt enabled? */
 870              		.loc 1 427 0
 871 0040 FB68     		ldr	r3, [r7, #12]
 872 0042 1B88     		ldrh	r3, [r3]
 873 0044 1A1C     		mov	r2, r3
 874 0046 0123     		mov	r3, #1
 875 0048 1340     		and	r3, r2
 876 004a DBB2     		uxtb	r3, r3
 877 004c 002B     		cmp	r3, #0
 878 004e 07D0     		beq	.L28
 428:../Generated_Code/AS1.c ****     if (StatReg & UART0_S1_TDRE_MASK) { /* Is the transmitter empty? */
 879              		.loc 1 428 0
 880 0050 221C     		mov	r2, r4
 881 0052 8023     		mov	r3, #128
 882 0054 1340     		and	r3, r2
 883 0056 03D0     		beq	.L28
 429:../Generated_Code/AS1.c ****       InterruptTx(DeviceDataPrv);      /* If yes, then invoke the internal service routine. This ro
 884              		.loc 1 429 0
 885 0058 FB68     		ldr	r3, [r7, #12]
 886 005a 181C     		mov	r0, r3
 887 005c FFF7FEFF 		bl	InterruptTx
 888              	.L28:
 430:../Generated_Code/AS1.c ****     }
 431:../Generated_Code/AS1.c ****   }
 432:../Generated_Code/AS1.c **** }
 889              		.loc 1 432 0
 890 0060 BD46     		mov	sp, r7
 891 0062 05B0     		add	sp, sp, #20
 892              		@ sp needed for prologue
 893 0064 90BD     		pop	{r4, r7, pc}
 894              	.L33:
 895 0066 C046     		.align	2
 896              	.L32:
 897 0068 00A00640 		.word	1074176000
 898              		.cfi_endproc
 899              	.LFE8:
 901              		.text
 902              	.Letext0:
 903              		.file 2 "C:/Freescale/CW MCU v10.3/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 904              		.file 3 "C:/Users/LARM/workspace/MQX-Lite + SPI + Motor + Ultrassom/MQXLITE/psp/cortex_m/psptypes.
 905              		.file 4 "C:/Users/LARM/workspace/MQX-Lite + SPI + Motor + Ultrassom/Generated_Code/IO_Map.h"
 906              		.file 5 "../Generated_Code/PE_LDD.h"
 907              		.file 6 "../Generated_Code/AS1.h"
DEFINED SYMBOLS
                            *ABS*:00000000 AS1.c
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:18     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:21     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:24     .text.AS1_Init:00000000 $t
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:29     .text.AS1_Init:00000000 AS1_Init
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:281    .text.AS1_Init:0000019c $d
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:816    .text.AS1_Interrupt:00000000 AS1_Interrupt
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:296    .text.AS1_Deinit:00000000 $t
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:301    .text.AS1_Deinit:00000000 AS1_Deinit
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:379    .text.AS1_Deinit:00000070 $d
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:387    .text.AS1_ReceiveBlock:00000000 $t
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:392    .text.AS1_ReceiveBlock:00000000 AS1_ReceiveBlock
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:462    .text.AS1_SendBlock:00000000 $t
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:467    .text.AS1_SendBlock:00000000 AS1_SendBlock
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:559    .text.AS1_SendBlock:0000007c $d
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:564    .text.AS1_GetReceivedDataNum:00000000 $t
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:569    .text.AS1_GetReceivedDataNum:00000000 AS1_GetReceivedDataNum
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:601    .text.AS1_GetSentDataNum:00000000 $t
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:606    .text.AS1_GetSentDataNum:00000000 AS1_GetSentDataNum
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:638    .text.InterruptRx:00000000 $t
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:642    .text.InterruptRx:00000000 InterruptRx
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:709    .text.InterruptRx:00000054 $d
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:714    .text.InterruptTx:00000000 $t
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:718    .text.InterruptTx:00000000 InterruptTx
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:806    .text.InterruptTx:0000007c $d
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:811    .text.AS1_Interrupt:00000000 $t
C:\Users\LARM\AppData\Local\Temp\cc6jOjYh.s:897    .text.AS1_Interrupt:00000068 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_int_get_isr_data
_int_install_isr
PE_LDD_DeviceDataList
_int_disable
_int_enable
AS1_OnBlockReceived
AS1_OnBlockSent
